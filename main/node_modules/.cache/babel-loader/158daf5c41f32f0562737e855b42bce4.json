{"ast":null,"code":"import _toConsumableArray from \"/Users/snp/Desktop/\\u1109\\u1165\\u1105\\u1172/grad/Undergraduate/SKKU_undergraduate_thesis_SeungGiKim/main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/Users/snp/Desktop/\\u1109\\u1165\\u1105\\u1172/grad/Undergraduate/SKKU_undergraduate_thesis_SeungGiKim/main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/snp/Desktop/\\u1109\\u1165\\u1105\\u1172/grad/Undergraduate/SKKU_undergraduate_thesis_SeungGiKim/main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/snp/Desktop/\\u1109\\u1165\\u1105\\u1172/grad/Undergraduate/SKKU_undergraduate_thesis_SeungGiKim/main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/snp/Desktop/\\u1109\\u1165\\u1105\\u1172/grad/Undergraduate/SKKU_undergraduate_thesis_SeungGiKim/main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/snp/Desktop/\\u1109\\u1165\\u1105\\u1172/grad/Undergraduate/SKKU_undergraduate_thesis_SeungGiKim/main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/Users/snp/Desktop/\\u1109\\u1165\\u1105\\u1172/grad/Undergraduate/SKKU_undergraduate_thesis_SeungGiKim/main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/snp/Desktop/\\u1109\\u1165\\u1105\\u1172/grad/Undergraduate/SKKU_undergraduate_thesis_SeungGiKim/main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/snp/Desktop/\\u1109\\u1165\\u1105\\u1172/grad/Undergraduate/SKKU_undergraduate_thesis_SeungGiKim/main/src/components/App.js\";\nimport React, { Component } from \"react\";\nimport Web3 from \"web3\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport NftPaper from \"../abis/NftPaper.json\";\nimport { MDBCard, MDBCardBody, MDBCardTitle, MDBCardText, MDBCardImage, MDBBtn } from \"mdb-react-ui-kit\";\nimport \"./App.css\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }() // first up is to detect ethereum provider\n\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var provider;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return detectEthereumProvider();\n\n              case 2:\n                provider = _context2.sent;\n\n                if (provider) {\n                  //Metamask Connection: successful\n                  console.log(\"Ethereum wallet is connected\");\n                  window.web3 = new Web3(provider);\n                } else {\n                  //Metamask Connection: failed\n                  console.log(\"no ethereum wallet detected\");\n                }\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var web3, accounts, networkId, networkData, abi, address, contract, totalSupply, i, _NftPaper;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3;\n                _context3.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context3.sent;\n                this.setState({\n                  account: accounts[0]\n                });\n                _context3.next = 7;\n                return web3.eth.net.getId();\n\n              case 7:\n                networkId = _context3.sent;\n                networkData = NftPaper.networks[networkId];\n\n                if (!networkData) {\n                  _context3.next = 30;\n                  break;\n                }\n\n                abi = NftPaper.abi;\n                address = networkData.address;\n                contract = new web3.eth.Contract(abi, address);\n                this.setState({\n                  contract: contract\n                });\n                console.log(contract);\n                _context3.next = 17;\n                return contract.methods.totalSupply().call();\n\n              case 17:\n                totalSupply = _context3.sent;\n                this.setState({\n                  totalSupply: totalSupply\n                });\n                i = 1;\n\n              case 20:\n                if (!(i <= totalSupply)) {\n                  _context3.next = 28;\n                  break;\n                }\n\n                _context3.next = 23;\n                return contract.methods.nftPapers(i - 1).call();\n\n              case 23:\n                _NftPaper = _context3.sent;\n                this.setState({\n                  nftPapers: [].concat(_toConsumableArray(this.state.nftPapers), [_NftPaper])\n                });\n\n              case 25:\n                i++;\n                _context3.next = 20;\n                break;\n\n              case 28:\n                _context3.next = 31;\n                break;\n\n              case 30:\n                window.alert(\"Smart contract not deployed\");\n\n              case 31:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.mint = function (nftPaper) {\n      _this.state.contract.methods.mint(nftPaper).send({\n        from: _this.state.account\n      }).once(\"receipt\", function (receipt) {\n        _this.setState({\n          nftPapers: [].concat(_toConsumableArray(_this.state.nftPapers), [NftPaper])\n        });\n      });\n    };\n\n    _this.state = {\n      account: \"\",\n      contract: null,\n      totalSupply: 0,\n      nftPapers: []\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, \"RESTART!\");\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/snp/Desktop/서류/grad/Undergraduate/SKKU_undergraduate_thesis_SeungGiKim/main/src/components/App.js"],"names":["React","Component","Web3","detectEthereumProvider","NftPaper","MDBCard","MDBCardBody","MDBCardTitle","MDBCardText","MDBCardImage","MDBBtn","App","loadWeb3","loadBlockchainData","provider","console","log","window","web3","eth","getAccounts","accounts","setState","account","net","getId","networkId","networkData","networks","abi","address","contract","Contract","methods","totalSupply","call","i","nftPapers","state","alert","props","mint","nftPaper","send","from","once","receipt"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Web3 from \"web3\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport NftPaper from \"../abis/NftPaper.json\";\nimport {\n  MDBCard,\n  MDBCardBody,\n  MDBCardTitle,\n  MDBCardText,\n  MDBCardImage,\n  MDBBtn,\n} from \"mdb-react-ui-kit\";\nimport \"./App.css\";\n\nclass App extends Component {\n  async componentDidMount() {\n    await this.loadWeb3();\n    await this.loadBlockchainData();\n  }\n\n  // first up is to detect ethereum provider\n  async loadWeb3() {\n    const provider = await detectEthereumProvider();\n\n    if (provider) {\n      //Metamask Connection: successful\n      console.log(\"Ethereum wallet is connected\");\n      window.web3 = new Web3(provider);\n    } else {\n      //Metamask Connection: failed\n      console.log(\"no ethereum wallet detected\");\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3;\n    const accounts = await web3.eth.getAccounts();\n    this.setState({ account: accounts[0] });\n\n    const networkId = await web3.eth.net.getId();\n    const networkData = NftPaper.networks[networkId];\n\n    if (networkData) {\n      const abi = NftPaper.abi;\n      const address = networkData.address;\n\n      const contract = new web3.eth.Contract(abi, address);\n      this.setState({ contract });\n      console.log(contract);\n\n      const totalSupply = await contract.methods.totalSupply().call();\n      this.setState({ totalSupply });\n\n      for (let i = 1; i <= totalSupply; i++) {\n        const NftPaper = await contract.methods.nftPapers(i - 1).call();\n\n        this.setState({\n          nftPapers: [...this.state.nftPapers, NftPaper],\n        });\n      }\n    } else {\n      window.alert(\"Smart contract not deployed\");\n    }\n  }\n\n  mint = (nftPaper) => {\n    this.state.contract.methods\n      .mint(nftPaper)\n      .send({ from: this.state.account })\n      .once(\"receipt\", (receipt) => {\n        this.setState({\n          nftPapers: [...this.state.nftPapers, NftPaper],\n        });\n      });\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      account: \"\",\n      contract: null,\n      totalSupply: 0,\n      nftPapers: [],\n    };\n  }\n\n  render() {\n    return <div>RESTART!</div>;\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}