{"ast":null,"code":"import _toConsumableArray from \"/Users/snp/Desktop/\\u1109\\u1165\\u1105\\u1172/grad/Undergraduate/SKKU_undergraduate_thesis_SeungGiKim/main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/Users/snp/Desktop/\\u1109\\u1165\\u1105\\u1172/grad/Undergraduate/SKKU_undergraduate_thesis_SeungGiKim/main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/snp/Desktop/\\u1109\\u1165\\u1105\\u1172/grad/Undergraduate/SKKU_undergraduate_thesis_SeungGiKim/main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/snp/Desktop/\\u1109\\u1165\\u1105\\u1172/grad/Undergraduate/SKKU_undergraduate_thesis_SeungGiKim/main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/snp/Desktop/\\u1109\\u1165\\u1105\\u1172/grad/Undergraduate/SKKU_undergraduate_thesis_SeungGiKim/main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/snp/Desktop/\\u1109\\u1165\\u1105\\u1172/grad/Undergraduate/SKKU_undergraduate_thesis_SeungGiKim/main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/Users/snp/Desktop/\\u1109\\u1165\\u1105\\u1172/grad/Undergraduate/SKKU_undergraduate_thesis_SeungGiKim/main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/snp/Desktop/\\u1109\\u1165\\u1105\\u1172/grad/Undergraduate/SKKU_undergraduate_thesis_SeungGiKim/main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/snp/Desktop/\\u1109\\u1165\\u1105\\u1172/grad/Undergraduate/SKKU_undergraduate_thesis_SeungGiKim/main/src/components/App.js\";\nimport React, { Component } from \"react\";\nimport Web3 from \"web3\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport NftPaper from \"../abis/NftPaper.json\";\nimport { MDBCard, MDBCardBody, MDBCardTitle, MDBCardText, MDBCardImage, MDBBtn } from \"mdb-react-ui-kit\";\nimport \"./App.css\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }() // first up is to detect ethereum provider\n\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var provider;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return detectEthereumProvider();\n\n              case 2:\n                provider = _context2.sent;\n\n                if (provider) {\n                  //Metamask Connection: successful\n                  console.log(\"ethereum wallet is connected\");\n                  window.web3 = new Web3(provider);\n                } else {\n                  //Metamask Connection: failed\n                  console.log(\"no ethereum wallet detected\");\n                }\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var web3, accounts, networkId, networkData, abi, address, contract, totalSupply, i, _NftPaper;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3;\n                _context3.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context3.sent;\n                this.setState({\n                  account: accounts[0]\n                });\n                _context3.next = 7;\n                return web3.eth.net.getId();\n\n              case 7:\n                networkId = _context3.sent;\n                networkData = NftPaper.networks[networkId];\n\n                if (!networkData) {\n                  _context3.next = 29;\n                  break;\n                }\n\n                abi = NftPaper.abi;\n                address = networkData.address;\n                contract = new web3.eth.Contract(abi, address);\n                this.setState({\n                  contract: contract\n                });\n                _context3.next = 16;\n                return contract.methods.totalSupply().call();\n\n              case 16:\n                totalSupply = _context3.sent;\n                this.setState({\n                  totalSupply: totalSupply\n                });\n                i = 1;\n\n              case 19:\n                if (!(i <= totalSupply)) {\n                  _context3.next = 27;\n                  break;\n                }\n\n                _context3.next = 22;\n                return contract.methods.nftPapers(i - 1).call();\n\n              case 22:\n                _NftPaper = _context3.sent;\n                this.setState({\n                  nftPapers: [].concat(_toConsumableArray(this.state.nftPapers), [_NftPaper])\n                });\n\n              case 24:\n                i++;\n                _context3.next = 19;\n                break;\n\n              case 27:\n                _context3.next = 30;\n                break;\n\n              case 29:\n                window.alert(\"Smart contract not deployed\");\n\n              case 30:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }() // with minting we are sending information and we need to specify the account\n\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.mint = function (nftPaper) {\n      _this.state.contract.methods.mint(nftPaper).send({\n        from: _this.state.account\n      }).once(\"receipt\", function (receipt) {\n        _this.setState({\n          nftPapers: [].concat(_toConsumableArray(_this.state.nftPapers), [NftPaper])\n        });\n      });\n    };\n\n    _this.state = {\n      account: \"\",\n      contract: null,\n      totalSupply: 0,\n      nftPapers: []\n    };\n    return _this;\n  } // BUILDING THE MINTING FORM\n  // 1. Create a text input with a place holder\n  //'add file location'\n  // 2. Create another input button with the type submit\n\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"container-filled\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, console.log(this.state.nftPapers), React.createElement(\"nav\", {\n        className: \"navbar navbar-dark fixed-top  bg-dark flex-md-nowrap p-0 shadow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"navbar-brand col-sm- col-md-3  mr-0\",\n        id: \"title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, \"NFT Papers\"), React.createElement(\"ul\", {\n        className: \"navbar-nav px-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, React.createElement(\"ul\", {\n        className: \"nav-item text-nowrap d-none d-sm-none d-sm-block \",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, \"\\uC5F0\\uACB0\\uB41C \\uACC4\\uC88C: \", this.state.account)))), React.createElement(\"div\", {\n        className: \"container-fluid mt-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 d-flex text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"content mr-auto ml-auto\",\n        style: {\n          opacity: \"0.8\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        style: {\n          color: \"black\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, \"NFT Paper: publish paper using NFT!\"), React.createElement(\"form\", {\n        onSubmit: function onSubmit(event) {\n          event.preventDefault();\n          var nftPaper = _this2.nftPaper.value;\n\n          _this2.mint(nftPaper);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        placeholder: \"Add a file location\",\n        className: \"form-control mb-1\",\n        ref: function ref(input) {\n          return _this2.nftPaper = input;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        style: {\n          margin: \"20px\"\n        },\n        type: \"submit\",\n        className: \"btn btn-primary btn-black\",\n        value: \"MINT\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }))))), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"row textCenter\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, this.state.nftPapers.map(function (nftPaper, key) {\n        if (_this2.state.account === _this2.state.contract.methods.ownerOf()) {\n          return React.createElement(\"div\", {\n            id: \"NFTs\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 158\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 159\n            },\n            __self: this\n          }, React.createElement(MDBCard, {\n            className: \"token img\",\n            style: {\n              maxWidth: \"22rem\"\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 160\n            },\n            __self: this\n          }, React.createElement(MDBCardImage, {\n            src: nftPaper //<a href=\"https://ibb.co/vvs65Nx\"><img src=\"https://i.ibb.co/fG8zR3Y/image.png\" alt=\"image\" border=\"0\"></a>\n            //\n            //<a href=\"https://ibb.co/bFQ0Ctp\"><img src=\"https://i.ibb.co/MfZvtdq/1.png\" alt=\"1\" border=\"0\"></a>\n            //<a href=\"https://ibb.co/zHSkK95\"><img src=\"https://i.ibb.co/JFzhX6d/2.png\" alt=\"2\" border=\"0\"></a>\n            //<a href=\"https://ibb.co/rGZD7fL\"><img src=\"https://i.ibb.co/kghNH6r/3.png\" alt=\"3\" border=\"0\"></a>\n            //<a href=\"https://ibb.co/v4CBNrw\"><img src=\"https://i.ibb.co/7txz3TY/4.png\" alt=\"4\" border=\"0\"></a>\n            ,\n            position: \"top\",\n            height: \"250rem\",\n            style: {\n              marginRight: \"4px\"\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 164\n            },\n            __self: this\n          }), React.createElement(MDBCardBody, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 176\n            },\n            __self: this\n          }, React.createElement(MDBCardTitle, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 177\n            },\n            __self: this\n          }, \" NFT paper \"), React.createElement(MDBCardText, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 178\n            },\n            __self: this\n          }, \" \", \"Successfully minted NFT paper!\", \" \"), React.createElement(MDBBtn, {\n            href: nftPaper,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 182\n            },\n            __self: this\n          }, \"Download\")))));\n        }\n      }))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/snp/Desktop/서류/grad/Undergraduate/SKKU_undergraduate_thesis_SeungGiKim/main/src/components/App.js"],"names":["React","Component","Web3","detectEthereumProvider","NftPaper","MDBCard","MDBCardBody","MDBCardTitle","MDBCardText","MDBCardImage","MDBBtn","App","loadWeb3","loadBlockchainData","provider","console","log","window","web3","eth","getAccounts","accounts","setState","account","net","getId","networkId","networkData","networks","abi","address","contract","Contract","methods","totalSupply","call","i","nftPapers","state","alert","props","mint","nftPaper","send","from","once","receipt","opacity","color","event","preventDefault","value","input","margin","map","key","ownerOf","maxWidth","marginRight"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Web3 from \"web3\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport NftPaper from \"../abis/NftPaper.json\";\nimport {\n  MDBCard,\n  MDBCardBody,\n  MDBCardTitle,\n  MDBCardText,\n  MDBCardImage,\n  MDBBtn,\n} from \"mdb-react-ui-kit\";\nimport \"./App.css\";\n\nclass App extends Component {\n  async componentDidMount() {\n    await this.loadWeb3();\n    await this.loadBlockchainData();\n  }\n\n  // first up is to detect ethereum provider\n  async loadWeb3() {\n    const provider = await detectEthereumProvider();\n\n    if (provider) {\n      //Metamask Connection: successful\n      console.log(\"ethereum wallet is connected\");\n      window.web3 = new Web3(provider);\n    } else {\n      //Metamask Connection: failed\n      console.log(\"no ethereum wallet detected\");\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3;\n    const accounts = await web3.eth.getAccounts();\n    this.setState({ account: accounts[0] });\n\n    const networkId = await web3.eth.net.getId();\n    const networkData = NftPaper.networks[networkId];\n\n    if (networkData) {\n      const abi = NftPaper.abi;\n      const address = networkData.address;\n      const contract = new web3.eth.Contract(abi, address);\n      this.setState({ contract });\n\n      const totalSupply = await contract.methods.totalSupply().call();\n      this.setState({ totalSupply });\n\n      for (let i = 1; i <= totalSupply; i++) {\n        const NftPaper = await contract.methods.nftPapers(i - 1).call();\n\n        this.setState({\n          nftPapers: [...this.state.nftPapers, NftPaper],\n        });\n      }\n    } else {\n      window.alert(\"Smart contract not deployed\");\n    }\n  }\n\n  // with minting we are sending information and we need to specify the account\n\n  mint = (nftPaper) => {\n    this.state.contract.methods\n      .mint(nftPaper)\n      .send({ from: this.state.account })\n      .once(\"receipt\", (receipt) => {\n        this.setState({\n          nftPapers: [...this.state.nftPapers, NftPaper],\n        });\n      });\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      account: \"\",\n      contract: null,\n      totalSupply: 0,\n      nftPapers: [],\n    };\n  }\n\n  // BUILDING THE MINTING FORM\n  // 1. Create a text input with a place holder\n  //'add file location'\n  // 2. Create another input button with the type submit\n\n  render() {\n    return (\n      <div className=\"container-filled\">\n        {console.log(this.state.nftPapers)}\n        <nav\n          className=\"navbar navbar-dark fixed-top \n                bg-dark flex-md-nowrap p-0 shadow\"\n        >\n          <div\n            className=\"navbar-brand col-sm- col-md-3 \n                mr-0\"\n            id=\"title\"\n          >\n            NFT Papers\n          </div>\n          <ul className=\"navbar-nav px-3\">\n            <ul\n              className=\"nav-item text-nowrap\n                d-none d-sm-none d-sm-block\n                \"\n            >\n              <ul>연결된 계좌: {this.state.account}</ul>\n            </ul>\n          </ul>\n        </nav>\n\n        <div className=\"container-fluid mt-1\">\n          <div className=\"row\">\n            <main role=\"main\" className=\"col-lg-12 d-flex text-center\">\n              <div\n                className=\"content mr-auto ml-auto\"\n                style={{ opacity: \"0.8\" }}\n              >\n                <h1 style={{ color: \"black\" }}>\n                  NFT Paper: publish paper using NFT!\n                </h1>\n                <form\n                  onSubmit={(event) => {\n                    event.preventDefault();\n                    const nftPaper = this.nftPaper.value;\n                    this.mint(nftPaper);\n                  }}\n                >\n                  <input\n                    type=\"text\"\n                    placeholder=\"Add a file location\"\n                    className=\"form-control mb-1\"\n                    ref={(input) => (this.nftPaper = input)}\n                  />\n                  <input\n                    style={{ margin: \"20px\" }}\n                    type=\"submit\"\n                    className=\"btn btn-primary btn-black\"\n                    value=\"MINT\"\n                  />\n                </form>\n              </div>\n            </main>\n          </div>\n          <hr></hr>\n          <div className=\"row textCenter\">\n            {this.state.nftPapers.map((nftPaper, key) => {\n              if (\n                this.state.account === this.state.contract.methods.ownerOf()\n              ) {\n                return (\n                  <div id=\"NFTs\">\n                    <div>\n                      <MDBCard\n                        className=\"token img\"\n                        style={{ maxWidth: \"22rem\" }}\n                      >\n                        <MDBCardImage\n                          src={nftPaper}\n                          //<a href=\"https://ibb.co/vvs65Nx\"><img src=\"https://i.ibb.co/fG8zR3Y/image.png\" alt=\"image\" border=\"0\"></a>\n                          //\n                          //<a href=\"https://ibb.co/bFQ0Ctp\"><img src=\"https://i.ibb.co/MfZvtdq/1.png\" alt=\"1\" border=\"0\"></a>\n                          //<a href=\"https://ibb.co/zHSkK95\"><img src=\"https://i.ibb.co/JFzhX6d/2.png\" alt=\"2\" border=\"0\"></a>\n                          //<a href=\"https://ibb.co/rGZD7fL\"><img src=\"https://i.ibb.co/kghNH6r/3.png\" alt=\"3\" border=\"0\"></a>\n                          //<a href=\"https://ibb.co/v4CBNrw\"><img src=\"https://i.ibb.co/7txz3TY/4.png\" alt=\"4\" border=\"0\"></a>\n                          position=\"top\"\n                          height=\"250rem\"\n                          style={{ marginRight: \"4px\" }}\n                        />\n                        <MDBCardBody>\n                          <MDBCardTitle> NFT paper </MDBCardTitle>\n                          <MDBCardText>\n                            {\" \"}\n                            Successfully minted NFT paper!{\" \"}\n                          </MDBCardText>\n                          <MDBBtn href={nftPaper}>Download</MDBBtn>\n                        </MDBCardBody>\n                      </MDBCard>\n                    </div>\n                  </div>\n                );\n              }\n            })}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}